{"name":"librarian-puppet","body":"## Introduction\r\n\r\nLibrarian-puppet is a bundler for your puppet infrastructure.  You can use\r\nlibrarian-puppet to manage the puppet modules your infrastructure depends on.\r\nIt is based on [Librarian](https://github.com/applicationsonline/librarian), a\r\nframework for writing bundlers, which are tools that resolve, fetch, install,\r\nand isolate a project's dependencies.\r\n\r\nLibrarian-puppet manages your `modules/` directory for you based on your\r\n`Puppetfile`.  Your `Puppetfile` becomes the authoritative source for what\r\nmodules you require and at what version, tag or branch.\r\n\r\nOnce using Librarian-puppet you should not modify the contents of your `modules`\r\ndirectory.  The individual modules' repos should be updated, tagged with a new\r\nrelease and the version bumped in your Puppetfile.\r\n\r\n## The Puppetfile\r\n\r\nEvery Puppet repository that uses Librarian-puppet will have a file named\r\n`Puppetfile` in the root directory of that repository.  The full specification\r\nfor which modules your puppet infrastructure repository  depends goes in here.\r\n\r\n### Example Puppetfile\r\n\r\n    forge \"http://forge.puppetlabs.com\"\r\n\r\n    mod \"puppetlabs/razor\"\r\n    mod \"puppetlabs/ntp\", \"0.0.3\"\r\n\r\n    mod \"apt\",\r\n      :git => \"git://github.com/puppetlabs/puppetlabs-apt.git\"\r\n\r\n    mod \"stdlib\",\r\n      :git => \"git://github.com/puppetlabs/puppetlabs-stdlib.git\"\r\n\r\n*See [jenkins-appliance](https://github.com/aussielunix/jenkins-appliance) for\r\na puppet repo already setup to use librarian-puppet.*\r\n\r\n### Puppetfile Breakdown\r\n\r\n    forge \"http://forge.puppetlabs.com\"\r\n\r\nThis declares that we want to use the official Puppet Labs Forge as our default\r\nsource when pulling down modules.  If you run your own local forge, you may\r\nwant to change this.\r\n\r\n    mod \"puppetlabs/razor\"\r\n\r\nPull in the latest version of the Puppet Labs Razor module from the default\r\nsource.\r\n\r\n    mod \"puppetlabs/ntp\", \"0.0.3\"\r\n\r\nPull in version 0.0.3 of the Puppet Labs NTP module from the default source.\r\n\r\n    mod \"apt\",\r\n      :git => \"git://github.com/puppetlabs/puppetlabs-apt.git\"\r\n\r\nOur puppet infrastructure repository depends on the `apt` module from the\r\nPuppet Labs GitHub repos and checks out the `master` branch.\r\n\r\n    mod \"apt\",\r\n      :git => \"git://github.com/puppetlabs/puppetlabs-apt.git\"\r\n      :ref => '0.0.3'\r\n\r\nOur puppet infrastructure repository depends on the `apt` module from the\r\nPuppet Labs GitHub repos and checks out a tag of `0.0.3`.\r\n\r\n    mod \"apt\",\r\n      :git => \"git://github.com/puppetlabs/puppetlabs-apt.git\"\r\n      :ref => 'feature/master/dans_refactor'\r\n\r\nOur puppet infrastructure repository depends on the `apt` module from the\r\nPuppet Labs GitHub repos and checks out the `dans_refactor` branch.\r\n\r\nWhen using a Git source, we do not have to use a `:ref =>`.\r\nIf we do not, then librarian-puppet will assume we meant the `master` branch.\r\n\r\nIf we use a `:ref =>`, we can use anything that Git will recognize as a ref.\r\nThis includes any branch name, tag name, SHA, or SHA unique prefix. If we use a\r\nbranch, we can later ask Librarian-pupet to update the modulek by fetching the\r\nmost recent version of the module from that same branch.\r\n\r\nThe Git source also supports a `:path =>` option. If we use the path option,\r\nLibrarian-puppet will navigate down into the Git repository and only use the\r\nspecified subdirectory. Some people have the habit of having a single repository\r\nwith many modules in it. If we need a module from such a repository, we can\r\nuse the `:path =>` option here to help Librarian-puppet drill down and find the\r\nmodule subdirectory.\r\n\r\n    mod \"apt\",\r\n      :git => \"git://github.com/fake/puppet-modules.git\"\r\n      :path => \"modules/apt\"\r\n\r\nOur puppet infrastructure repository depends on the `apt` module, which we have\r\nstored as a directory under our `puppet-modules` git repos.\r\n\r\n## How to Use\r\n\r\nInstall librarian-puppet:\r\n\r\n    $ gem install --pre librarian-puppet\r\n\r\nPrepare your puppet infrastructure repository:\r\n\r\n    $ cd ~/path/to/puppet-inf-repos\r\n    $ (git) rm -rf modules\r\n    $ librarian-puppet init\r\n\r\nLibrarian-puppet takes over your `modules/` directory, and will always\r\nreinstall (if missing) the modules listed the `Puppetfile.lock` into your\r\n`modules/` directory, therefore you do not need your `modules/` directory to be\r\ntracked in Git.\r\n\r\nLibrarian-puppet uses a `.tmp/` directory for tempfiles and caches. You should\r\nnot track this directory in Git.\r\n\r\nRunning `librarian-puppet init` will create a skeleton Puppetfile for you as\r\nwell as adding `tmp/` and `modules/` to your `.gitignore`.\r\n\r\n    $ librarian-puppet install [--clean] [--verbose]\r\n\r\nThis command looks at each `mod` declaration and fetches the module from the\r\nsource specified.  This command writes the complete resolution into\r\n`Puppetfile.lock` and then copies all of the fetched modules into your\r\n`modules/` directory, overwriting whatever was there before.\r\n\r\nGet an overview of your `Puppetfile.lock` with:\r\n\r\n    $ librarian-puppet show\r\n\r\nInspect the details of specific resolved dependencies with:\r\n\r\n    $ librarian-puppet show NAME1 [NAME2, ...]\r\n\r\nFind out which dependencies are outdated and may be updated:\r\n\r\n    $ librarian-puppet outdated [--verbose]\r\n\r\nUpdate the version of a dependency:\r\n\r\n    $ librarian-puppet update apt [--verbose]\r\n    $ git diff Puppetfile.lock\r\n    $ git add Puppetfile.lock\r\n    $ git commit -m \"bumped the version of apt up to 0.0.4.\"\r\n\r\n## How to Contribute\r\n\r\n * Pull requests please.\r\n * Bonus points for feature branches.\r\n\r\n## Reporting Issues\r\n\r\nBug reports to the github issue tracker please.\r\nPlease include:\r\n\r\n * relevant `Puppetfile` and `Puppetfile.lock` files.\r\n * version of ruby, librarian-puppet\r\n * What distro\r\n * Please run the `librarian-puppet` commands in verbose mode by using the\r\n  `--verbose` flag, and include the verbose output in the bug report as well.\r\n\r\n## License\r\nPlease see the [LICENSE](https://github.com/rodjek/librarian-puppet/blob/master/LICENSE)\r\nfile.\r\n","tagline":"You can all stop using git submodules now","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}